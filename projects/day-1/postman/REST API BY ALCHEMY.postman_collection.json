{
	"info": {
		"_postman_id": "36ea559a-5e74-46bf-a2e3-99759de93fc7",
		"name": "REST API BY ALCHEMY",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8579766"
	},
	"item": [
		{
			"name": "Get All Book",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{bookUrl}}/book",
					"host": [
						"{{bookUrl}}"
					],
					"path": [
						"book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Book by Id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{bookUrl}}/book/1",
					"host": [
						"{{bookUrl}}"
					],
					"path": [
						"book",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new Book",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"client_id\": 1234,\n  \"client_key\": \"CLIENT01\",\n  \"client_secret\": \"SECRET01\",\n  \"status\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{bookUrl}}/book",
					"host": [
						"{{bookUrl}}"
					],
					"path": [
						"book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update existing Book",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 1234,\n  \"title\": \"Judul Buku Satu\",\n  \"isbn\": \"1-234-5678-9101112-13\",\n  \"writer\": \"Dr. Who\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{bookUrl}}/book/1",
					"host": [
						"{{bookUrl}}"
					],
					"path": [
						"book",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete existing Book",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{bookUrl}}/book/1",
					"host": [
						"{{bookUrl}}"
					],
					"path": [
						"book",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get recent 1000 BTCUSDT",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const ts  = Date.now();",
							"pm.environment.set(\"timestamp\", ts);",
							"",
							"let paramsObject = {};",
							"",
							"const binance_api_secret = pm.environment.get(\"api_secret\");",
							"",
							"const parameters = pm.request.url.query;",
							"",
							"parameters.map((param) => {",
							"    if (param.key != 'signature' && ",
							"        param.key != 'timestamp' && ",
							"        !is_empty(param.value) &&",
							"        !is_disabled(param.disabled)) {",
							"            paramsObject[param.key] = param.value;",
							"            //console.log(encodeURIComponent(param.value));",
							"            //pm.environment.set(param.key, encodeURIComponent(param.value));",
							"    }",
							"})",
							"        ",
							"Object.assign(paramsObject, {'timestamp': ts});",
							"",
							"if (binance_api_secret) {",
							"    const queryString = Object.keys(paramsObject).map((key) => {",
							"        return `${key}=${paramsObject[key]}`;",
							"    }).join('&');",
							"    console.log(queryString);",
							"    const signature = CryptoJS.HmacSHA256(queryString, binance_api_secret).toString();",
							"    pm.environment.set(\"signature\", signature);",
							"}",
							"",
							"",
							"function is_disabled(str) {",
							"    return str == true;",
							"}",
							"",
							"function is_empty(str) {",
							"    if (typeof str == 'undefined' ||",
							"        !str || ",
							"        str.length === 0 || ",
							"        str === \"\" ||",
							"        !/[^\\s]/.test(str) ||",
							"        /^\\s*$/.test(str) ||",
							"        str.replace(/\\s/g,\"\") === \"\")",
							"    {",
							"        return true;",
							"    }",
							"    else",
							"    {",
							"        return false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-MBX-APIKEY",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{binanceUrl}}/api/v1/klines?symbol=BTCUSDT&interval=1m&limit=1000",
					"host": [
						"{{binanceUrl}}"
					],
					"path": [
						"api",
						"v1",
						"klines"
					],
					"query": [
						{
							"key": "symbol",
							"value": "BTCUSDT"
						},
						{
							"key": "interval",
							"value": "1m"
						},
						{
							"key": "limit",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get BTCUSDT with day interval",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const ts  = Date.now();",
							"pm.environment.set(\"timestamp\", ts);",
							"",
							"let paramsObject = {};",
							"",
							"const binance_api_secret = pm.environment.get(\"api_secret\");",
							"",
							"const parameters = pm.request.url.query;",
							"",
							"parameters.map((param) => {",
							"    if (param.key != 'signature' && ",
							"        param.key != 'timestamp' && ",
							"        !is_empty(param.value) &&",
							"        !is_disabled(param.disabled)) {",
							"            paramsObject[param.key] = param.value;",
							"            //console.log(encodeURIComponent(param.value));",
							"            //pm.environment.set(param.key, encodeURIComponent(param.value));",
							"    }",
							"})",
							"        ",
							"Object.assign(paramsObject, {'timestamp': ts});",
							"",
							"if (binance_api_secret) {",
							"    const queryString = Object.keys(paramsObject).map((key) => {",
							"        return `${key}=${paramsObject[key]}`;",
							"    }).join('&');",
							"    console.log(queryString);",
							"    const signature = CryptoJS.HmacSHA256(queryString, binance_api_secret).toString();",
							"    pm.environment.set(\"signature\", signature);",
							"}",
							"",
							"",
							"function is_disabled(str) {",
							"    return str == true;",
							"}",
							"",
							"function is_empty(str) {",
							"    if (typeof str == 'undefined' ||",
							"        !str || ",
							"        str.length === 0 || ",
							"        str === \"\" ||",
							"        !/[^\\s]/.test(str) ||",
							"        /^\\s*$/.test(str) ||",
							"        str.replace(/\\s/g,\"\") === \"\")",
							"    {",
							"        return true;",
							"    }",
							"    else",
							"    {",
							"        return false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-MBX-APIKEY",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{binanceUrl}}/api/v1/kline?symbol=BTCUSDT&interval=1d&startTime=1661990400000&endTime=1662508800000&limit=1000",
					"host": [
						"{{binanceUrl}}"
					],
					"path": [
						"api",
						"v1",
						"kline"
					],
					"query": [
						{
							"key": "symbol",
							"value": "BTCUSDT"
						},
						{
							"key": "interval",
							"value": "1d"
						},
						{
							"key": "startTime",
							"value": "1661990400000"
						},
						{
							"key": "endTime",
							"value": "1662508800000"
						},
						{
							"key": "limit",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get account information",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const ts  = Date.now();",
							"pm.environment.set(\"timestamp\", ts);",
							"",
							"let paramsObject = {};",
							"",
							"const binance_api_secret = pm.environment.get(\"api_secret\");",
							"",
							"const parameters = pm.request.url.query;",
							"",
							"parameters.map((param) => {",
							"    if (param.key != 'signature' && ",
							"        param.key != 'timestamp' && ",
							"        !is_empty(param.value) &&",
							"        !is_disabled(param.disabled)) {",
							"            paramsObject[param.key] = param.value;",
							"            //console.log(encodeURIComponent(param.value));",
							"            //pm.environment.set(param.key, encodeURIComponent(param.value));",
							"    }",
							"})",
							"        ",
							"Object.assign(paramsObject, {'timestamp': ts});",
							"",
							"if (binance_api_secret) {",
							"    const queryString = Object.keys(paramsObject).map((key) => {",
							"        return `${key}=${paramsObject[key]}`;",
							"    }).join('&');",
							"    console.log(queryString);",
							"    const signature = CryptoJS.HmacSHA256(queryString, binance_api_secret).toString();",
							"    pm.environment.set(\"signature\", signature);",
							"}",
							"",
							"",
							"function is_disabled(str) {",
							"    return str == true;",
							"}",
							"",
							"function is_empty(str) {",
							"    if (typeof str == 'undefined' ||",
							"        !str || ",
							"        str.length === 0 || ",
							"        str === \"\" ||",
							"        !/[^\\s]/.test(str) ||",
							"        /^\\s*$/.test(str) ||",
							"        str.replace(/\\s/g,\"\") === \"\")",
							"    {",
							"        return true;",
							"    }",
							"    else",
							"    {",
							"        return false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-MBX-APIKEY",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{binanceUrl}}/api/v3/account?recvWindow=60000&timestamp={{timestamp}}&signature={{signature}}",
					"host": [
						"{{binanceUrl}}"
					],
					"path": [
						"api",
						"v3",
						"account"
					],
					"query": [
						{
							"key": "recvWindow",
							"value": "60000"
						},
						{
							"key": "timestamp",
							"value": "{{timestamp}}"
						},
						{
							"key": "signature",
							"value": "{{signature}}"
						}
					]
				}
			},
			"response": []
		}
	]
}